[29/07, 10:27 am] Rama Laxmi: import java.util.*;

public class NumberOfPaths { 
 
    static int count(int m, int n) 
    { 
        
        if (m == 1 || n == 1) 
            return 1; 
   
        return count(m - 1, n) + count(m, n - 1); 
      
    } 
    static String numberOfPaths(int m,int n)
    {
        int c=count(m, n);
        
        String s=Integer.toString(c);
        return s;
    }
  
    public static void main(String args[]) 
    { 
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        String s=numberOfPaths(m,n);
        
       
        System.out.println(s);
    } 
}
[29/07, 11:37 am] Rama Laxmi: import java.util.*;

public class SecondMax { 
 
   public static int secondMax(int a[],int n)
   {
       Arrays.sort(a);
           
       int max=a[n-1];
       int count=0;
       
       for(int i=n-2;i>=0;i--)
       {
           if(a[i]==max) count++;
       }

       if(count==n-1)
       return -1;
       else if(count==0) return a[n-2];
       return a[n-count-2];
       
   }
   
  
    public static void main(String args[]) 
    { 
        Scanner sc=new Scanner(System.in);
       int length=sc.nextInt();
       int array[]=new int[length];
       for(int i=0;i<length;i++)
       {
           array[i]=sc.nextInt();
       }
       
       System.out.println(secondMax(array,length));
    } 
}
[30/07, 9:52 am] Jasper Kmit: //CardsProgramInJava

int min_so_far=input2[0],min_end_here=input2[0];
int begin=0;
int begin_temp=0;
int end=0;
for(int i=1;i<input2.length;i++)
{
if(min_end_here>0)
{
min_end_here=input2[i];
begin_temp=i;
}
else
{
min_end_here+=input2[i];
}
if(min_end_here<=min_so_far)
{
min_so_far=min_end_here;
begin=begin_temp;
end=i;
}
int sum=0;
for(int i=0;i<begin;i++)
{
sum+=input2[i];
}
for(int i=begin;i<=end;i++)
{
sum-=input2[i];
}
for(int i=end+1;i<input2.length;i++)
{
sum+=input2[i];
}
return sum;
}